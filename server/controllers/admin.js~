const User = require('../models').User;
const Credentials = require('../models').Credentials;

module.exports = {
    setDemo(req, res) {
        var demoData = [
            { "accountId": 1006, "customerName": "A", "balance": 2000, "address": { "planet": "EARTH", "latitude": "28.476920", "longitude": "-82.538750" } },
            { "accountId": 1007, "customerName": "B", "balance": 2000, "address": { "planet": "EARTH", "latitude": "28.476921", "longitude": "-82.538751" } },
            { "accountId": 1008, "customerName": "C", "balance": 2000, "address": { "planet": "EARTH", "latitude": "28.476922", "longitude": "-82.538752" } },
            { "accountId": 1009, "customerName": "D", "balance": 2000, "address": { "planet": "EARTH", "latitude": "28.476923", "longitude": "-82.538753" } },
            { "accountId": 1010, "customerName": "E", "balance": 2000, "address": { "planet": "EARTH", "latitude": "28.476924", "longitude": "-82.538754" } },
        ];
        var credentialData = [
            { "cardNo": "4493227621863476", "cardExpiryMonth": "06", "cardExpiryYear": "2022", "cardVerificationValue": "555" },
            { "cardNo": "4243898868120318", "cardExpiryMonth": "06", "cardExpiryYear": "2022", "cardVerificationValue": "275" },
            { "cardNo": "4769382981639854", "cardExpiryMonth": "06", "cardExpiryYear": "2022", "cardVerificationValue": "325" },
            { "cardNo": "4753565383254953", "cardExpiryMonth": "06", "cardExpiryYear": "2022", "cardVerificationValue": "419" },
            { "cardNo": "4632885445769070", "cardExpiryMonth": "06", "cardExpiryYear": "2022", "cardVerificationValue": "100" },
        ];
        demoData.forEach((item, index) => {
            User.create({
                accountId: item.accountId,
                customerName: item.customerName,
                balance: item.balance,
                address: item.address
            })
                .then(user => {
                    demoData[index].accountId = user.accountId;
                    credentialData[index].accountId = user.accountId
                    Credentials.create({
                        accountId: user.accountId,
                        cardNo: credentialData[index].cardNo,
                        cardExpiryMonth: credentialData[index].cardExpiryMonth,
                        cardExpiryYear: credentialData[index].cardExpiryYear,
                        cardVerificationValue: credentialData[index].cardVerificationValue,
                    })
                        .catch((error) => { return res.status(400).send(error) });
                })
                .catch(error => { return res.status(500).send(error) });
        });
        return res.status(200).send({ "message": "Insertion has been done successfully" });
    },
    registerUser(req, res) {
        /*req = {
            body:{ 
                cre: {
                    cardExpiryMonth: "04",
                    cardExpiryYear: "19",
                    cardNo: "8898678945678765",
                    cardVerificationValue: "344"
                },
                user: {
                    balance: 1000,
                    firstName: "babu",
                    lastName: "pallam",
                    line1: "pallam",
                    line2: "pulamanthole",
                    line3: "Kerala",
                    line4: "India",
                    line5: "679323",
                }
            }
        }*/
        //        res.body = req.body;
        //      return res.status(501).send(res.body);

        var globalId = '8160000';
        var currentId = globalId;
        var regDetails =[];
        retrieveCurrentAcNo =  User
                .findAll()
                .then((data) => {
                    if (data) {
                        //return res.status(200).send(data);
                        data.forEach((obj) => {
                            if (obj.accountId > currentId) {
                                currentId = obj.accountId;
                            }
                        })
                        currentId += 1;
                    }
                })
                .catch((error) => {
                    return res.status(300).send({'msg':'Database Fetching Error', 'error':error})
                });
        retrieveCurrentAcNo.then(() => {
            User
                .create({
                    accountId: parseInt(currentId),
                    customerName: req.body.user.firstName + " " + req.body.user.lastName,
                    balance: req.body.user.balance,
                    address: {
                        "line1": req.body.user.line1,
                        "line2": req.body.user.line2 + ", " + req.body.user.line5,
                        "line3": req.body.user.line3 + ", " + req.body.user.line4
                    }
                })
                .then(user => {
                	regDetails.push(user);
                    Credentials
                        .create({
                            accountId: user.accountId,
                            cardNo: req.body.cre.cardNo,
                            cardExpiryMonth: req.body.cre.cardExpiryMonth,
                            cardExpiryYear: req.body.cre.cardExpiryYear,
                            cardVerificationValue: req.body.cre.cardVerificationValue,
                        })
                        .then((cre) => {
                        	regDetails.push(cre); 
                        	res.status(200).send(regDetails) })
                        .catch((error) => { return res.status(305).send(error) });
                })
                .catch(error => { return res.status(310).send(error) });
        })
    },

    retrieveRegLog(req, res) {
        var Log = new Array();
        User.findAll()
            .then((logU) => {
                Log.push(logU);
                Credentials.findAll()
                    .then((logC) => {
                        Log.push(logC);
                        return res.status(200).send(Log);
                    })
                    .catch(error => res.status(400).send({ 'error': 'Error while fetching credentials data' }));
            })
            .catch(error => res.status(400).send({ 'error': 'Error while fetching User data' }));


    }
};
